var z='ognom',Datastore=require("nedb"),db=new Datastore({filename:__dirname+`/${z}.db`,autoload:!0}),createdb=function(){return new Promise((e,t)=>{db.insert({belongsTo:z,rawData:{}},function(n,r){if(n)return t(n);e(r)})})},dbget=function(e){return new Promise(async(t,n)=>{db.find({belongsTo:z},async function(r,a){if(r)return n(r);if(0==a.length){var o=await createdb();if("*"==e)return t(o.rawData);try{var d=dotnotation(e,o.rawData)}catch(e){d=null}return t(cleanObject(d))}if("*"==e)return t(cleanObject(a[0].rawData));try{d=dotnotation(e,a[0].rawData)}catch(e){d=null}return t(cleanObject(d))})})},dbset=(e,t)=>new Promise((n,r)=>{var a={};a["rawData."+e]=t,db.update({belongsTo:z},{$set:a},function(e,t){if(e)return r(e);n()})}),dbdelete=e=>new Promise((t,n)=>{dbset(e,void 0).then(t).catch(n)}),dbpush=(e,t)=>new Promise(async(n,r)=>{var a=await dbget(e);if(!a instanceof Array)return r(new Error("Cannot push to a non-array object"));a.push(t);var o={};o["rawData."+e]=a,db.update({belongsTo:z},{$set:o},(e,t)=>{if(e)return r(e);n()})}),dotnotation=(e,t)=>e.split`.`.reduce((e,t)=>e[t],t),cleanObject=e=>{try{new Object;return JSON.parse(JSON.stringify(e))}catch(t){return e}},o={};o.get=dbget,o.set=dbset,o.push=dbpush,o.delete=dbdelete,module.exports=o;
